p(note). the module project is hosted by google code at "mandubian-play-crud-siena":http://code.google.com/p/mandubian-play-crud-siena under MIT license

h1. CRUD Siena Play! module How-to

The CRUD (Create, Read, Update, Delete) Siena module generates a fully usable web interface for your Siena Model objects.

h2. <a>Enable Siena support to your Play! project</a>

p(note). **Note** Just call this command to get last siena version:

bc.. play install siena

h2. <a>Install CrudSiena module</a>

h3. For Play! <1.1_, install CrudSiena <=1.01:

bc.. play install crudsiena-1.01

h3. For Play! >=1.1_, install CrudSiena >=1.1:

bc.. play install crudsiena-1.x


h2. <a>Your Siena entity shall inherit SienaSupport</a>

p(note). **Note** this is exactly the sister class of Play! default class JpaSupport (from Play! version 1.0x)

For example:

bc.. @Table("employees")
public class Employee extends SienaSupport {

        @Id(Generator.AUTO_INCREMENT)
        public Long id; 

        @Column("first_name")
        @Max(100) @NotNull
        public String firstName;      
  
        @Column("last_name")
        @Max(200) @NotNull
        public String lastName;     
   
        @Column("contact_info")
        public Json contactInfo;     
              
        @Column("hire_date")
        public Date hireDate;

        @Column("fire_date")
        @DateTime	// displays a timepicker
        public Date fireDate;
          
        @Column("boss") 
        @Index("boss_index")
        public Employee boss;       
 
        @Filter("boss")
        public Query<Employee> employees;               

        @Embedded
        public Image profileImage;        

        @Embedded
        public List<Image> otherImages;

        @Embedded
        public Map<String, Image> stillImages;        

        @EmbeddedMap
        public class Image {
                public String filename;
                public String title;
                public int views;
        }        

        public static Query<Employee> all() {
                return Model.all(Employee.class);
        }        

        public String toString() {
                return firstName + " " + lastName;
        }
}


p. Please be aware of the possibility to manage:
* _Json_ fields
* _One to Many_ relation
* _Many to One_ relation
* _Embedded_ json-serialized objects : single object/list/map

p(note). For more information about Siena, go directly to "Siena site":http://www.sienaproject.com 

h2. <a>Create a controller inheriting class CRUD for each Siena entity requiring CRUD support</a>

p(note). **Note** this is exactly the sister class of Play! default controller CRUD

p. The name of the Controller class corresponding to a model class can be:
* **ModelClassName** _(this option is valid on in crudsiena because I found it more intuitive)_

For example:

bc. public class Employee extends controllers.CRUD {    
}

* **ModelClassName+'s'** (pluralized) _(but any char instead of 's' is OK also)_

For example:

bc. public class Employees extends controllers.CRUD {    
}

* **@For(ModelClass)** annotation added to your controller 

For example:

bc. @For(models.Employee.class)
public class Employees extends controllers.CRUD {
}

h2. <a>Enable routes to the CRUD module</a>

At the beginning of your conf/routes file, add:

bc. *    /admin    module:crudsiena

p(note). You can get more information at "original CRUD module site":http://www.playframework.org/documentation/1.0.3/crud

h2. <a>Play Validation with Siena annotations</a>

These are Siena model Annotations managed by the CrudSiena module: 
* **@Siena.Max(NB_CHAR)** is managed (enhancer creates dynamically a @play.data.validation.MaxSize(NB_CHAR) ) 
* **@Siena.NotNull** is managed (enhancer creates dynamically a @play.data.validation.Required ) 
* **@DateTime** is managed and displays a timepicker



h2. <a>Play Validation with Play annotations</a>

These are Play Annotations managed by the CrudSiena module:
* **@Required** is managed and displays an error if the field is not filled
* **@Password** is managed and displays a password text field

p(note). _You can't use Play! binding annotations_ 


h2. <a>Specific CrudSiena annotations</a>

* **@CrudUnique** is a new Annotation not provided by Play neither Siena. It verifies a field value is unique in its table. 
_(thanks to Spreiter301 for his contribution... see "googlecode issue":http://code.google.com/p/mandubian-play-crud-siena/issues/detail?id=2)_
*Be careful this annotation calls DB requests that can be quite heavy so it might impact your application performance.* (I will try to provide a mechanism to control where this annotation is applied but it is not so trivial) 


h2. <a>Known Limitations</a>

h3. **GAE**

* _@Id_ annotated field corresponding to the primary key must be Long type
* _@Id_ annotated field corresponding to the primary key must be called "id"

