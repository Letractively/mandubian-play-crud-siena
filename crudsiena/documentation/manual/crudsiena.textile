p(note). the module project is hosted by google code at "mandubian-play-crud-siena:http://code.google.com/p/mandubian-play-crud-siena" under MIT license

h1. CRUD Siena Play! module How-to

The CRUD (Create, Read, Update, Delete) Siena module generates a fully usable web interface for your Siena Model objects.

h2. <a>First of all, you have to enable Siena support to your Play! project</a>

p(note). **Note** you can find information about it directly "there":http://www.playframework.org/modules/siena-1.2/home

p(note). **YOU SHALL USE VERSION 1.2 of this siena module** because it integrates Siena 0.7.5 correcting an important issue concerning JSON (de)serialization of embedded objects*


h2. <a>You need to make your Siena entity inherit the class SienaSupport</a>

p(note). **Note** this is exactly the sister class of Play! default class JpaSupport

For example:

bc.. @Table("employees")
public class Employee extends SienaSupport {

        @Id(Generator.AUTO_INCREMENT)
        public Long id; 

        @Column("first_name")
        @Max(100) @NotNull
        public String firstName;      
  
        @Column("last_name")
        @Max(200) @NotNull
        public String lastName;     
   
        @Column("contact_info")
        public Json contactInfo;     
   
        @Column("boss") 
        @Index("boss_index")
        public Employee boss;       
 
        @Filter("boss")
        public Query<Employee> employees;               

        @Embedded
        public Image profileImage;        

        @Embedded
        public List<Image> otherImages;

        @Embedded
        public Map<String, Image> stillImages;        

        @EmbeddedMap
        public class Image {
                public String filename;
                public String title;
                public int views;
        }        

        public static Query<Employee> all() {
                return Model.all(Employee.class);
        }        

        public String toString() {
                return firstName + " " + lastName;
        }
}


p. Please be aware of the possibility to manage:
* _Json_ fields
* _One to Many_ relation
* _Many to One_ relation
* _Embedded_ json-serialized objects : single object/list/map

p(note). For more information about Siena, go directly to "Siena site":http://www.sienaproject.com 

h2. <a>You need to create a controller inheriting class CRUD for each Siena entity requiring CRUD support</a>

p(note). **Note** this is exactly the sister class of Play! default controller CRUD

p. The name of the Controller class corresponding to a model class can be:
* **ModelClassName** _(this option is valid on in crudsiena because I found it more intuitive)_

For example:

bc. public class Employee extends controllers.CRUD {    
}

* **ModelClassName+'s'** (pluralized) _(but any char instead of 's' is OK also)_

For example:

bc. public class Employees extends controllers.CRUD {    
}

* **@For(ModelClass)** annotation added to your controller 

For example:

bc. @For(models.Employee.class)
public class Employees extends controllers.CRUD {
}

h2. <a>You need to enable routes to the CRUD module</a>

At the beginning of your conf/routes file, add:

bc. *    /admin    module:crudsiena

p(note). You can get more information at "original CRUD module site":http://www.playframework.org/documentation/1.0.3/crud

h2. <a>Known Limitations</a>

h3. **GAE**

* _@Id_ annotated field corresponding to the primary key must be Long type
* _@Id_ annotated field corresponding to the primary key must be called "id"

h3. **Validation with Siena annotations**

* _@Max_/_@Min are managed
* Other annotations should be tested and implemented when missing 